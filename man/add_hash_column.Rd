% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/13-add_hash_column.R
\name{add_hash_column}
\alias{add_hash_column}
\title{add_hash_column}
\usage{
add_hash_column(DT_frame, hash_colname = "hash",
  colnames_for_hash = colnames(DT_frame), excluded_colnames = c(),
  unite = TRUE, cores = 1L, sort_colnames_for_hash = TRUE)
}
\arguments{
\item{DT_frame}{data.table.}

\item{hash_colname}{character; name of hash column}

\item{colnames_for_hash}{character vector; column names to create hash}

\item{excluded_colnames}{character vector; column names NOT to create hash}

\item{unite}{logical; if TRUE, then firstly uses 'tidyr::unite_' on 'colnames_for_hash' and only then creates hash. It matter when data.table is big frame, because it is much faster}

\item{cores}{integer; number of cores to create hash (works only when unite = TRUE); default: 1}

\item{sort_colnames_for_hash}{logical; if TRUE, sorts columns alphabetically before hash creation}
}
\value{
data.table
}
\description{
adds hash column (more info: \link[digest]{digest}). Hash is calculated on columne specified in `colnames_for_hash` argument (all columns by default). Function may be useful for creating Primary Key column (e.g. in MySQL )
}
\examples{
data <- data.table(a = c("X", "y", "Z"), b = c("a", "a", "Aa"), c = c("q", "w", "e"))
dt_hash <- add_hash_column(data, colnames_for_hash = c("a", "b"),
                           excluded_colnames = c(), unite = TRUE, cores = 1L,
                           sort_colnames_for_hash = TRUE)
}
